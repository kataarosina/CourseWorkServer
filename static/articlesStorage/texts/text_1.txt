Итак, ООП - это парадигма в программировании, которая провозглашает использование в программном коде классов и объектов. Однако что это такое?
<br>Класс - это описание всех свойств, которыми может обладать объект. А именно это поля (атрибуты) класса (числа, строки, другие объекты) и методы (операции) класса (функции, осуществляющие какие-то действия, которые производит объект).
<br>Объект - это просто экземпляр класса с определенными полями.
<br><div style="text-align: center; margin-top: 5px; margin-bottom: 5px"><img src="../../static/articlesStorage/images/article_1_0.jpeg" style="width: 50%"></div>
<br>Конечно, простое введение таких определений не дало бы ООП называться парадигмой - под это описание вполне могут подойти и структуры данных. Ведь ООП держится, ко всему прочему, на трех принципах, а именно:
<br>1. Наследование. Данный принцип провозглашает, что все классы могут наследоваться друг от друга, в частности, все классы, создаваемые во многих языках программирования, также обычно наследуются от класса Object.
<br><div style="text-align: center; margin-top: 5px; margin-bottom: 5px"><img src="../../static/articlesStorage/images/article_1_1.jpeg" style="width: 50%"></div>
<br>2. Инкапсуляция. Провозглашает, что каждый класс является некоторой оболочкой для данных, которые в нем хранятся. К тому же данный принцип позволяет скрывать некоторые данные и методы класса, которые, например, не нужны для интерфейса, но нужны для реализации логики.
<br><div style="text-align: center; margin-top: 5px; margin-bottom: 5px"><img src="../../static/articlesStorage/images/article_1_2.jpeg" style="width: 50%"></div>
<br>3. Полиморфизм. Провозглашает, что методы для каждого класса можно переопределять для разных типов данных, что позволит им обрабатывать разные типы введенных в функцию данных.
<br><div style="text-align: center; margin-top: 5px; margin-bottom: 5px"><img src="../../static/articlesStorage/images/article_1_3.jpeg" style="width: 50%"></div>